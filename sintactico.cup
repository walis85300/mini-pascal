package Tiny;

import java_cup.runtime.*;
import ast.*;
//import otros.*;

parser code {:

/***********
SymbolFactory es una nueva caracteristica que ha sido a�adida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha informaci�n de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/
	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		parser parser_obj;
		if (args.length==0) 
			parser_obj=new parser(new Scanner(System.in,sf),sf);
		else 
			parser_obj=new parser(new Scanner(new java.io.FileInputStream(args[0]),sf),sf);

		parser_obj.parse();
		/*NodoBase root=parser_obj.action_obj.getASTroot();
		System.out.println();
		System.out.println("IMPRESION DEL AST GENERADO");
		System.out.println();
		ast.Util.imprimirAST(root);
		TablaSimbolos ts = new TablaSimbolos();
		ts.cargarTabla(root);
		ts.ImprimirClaves();
		Tiny.Generador.setTablaSimbolos(ts);
		Tiny.Generador.generarCodigoObjeto(root);*/
	}

:}

action code {:
	private boolean debug=true;
	private NodoBase ast=null;
	private int lineanum=0;
	String tipo="";
	private NodoArray nodoarray= null;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
	
:}

/* Simbolos Terminales */

terminal IF;
terminal THEN;
terminal ELSE;
terminal END;
terminal REPEAT;
terminal WHILE;
terminal DO;
terminal UNTIL;
terminal READ;
terminal WRITE;
terminal String ID;
terminal String NUM;
terminal ASSIGN;
terminal EQ;
terminal LT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal OVER;
terminal LPAREN;
terminal RPAREN;
terminal SEMI;
terminal BEGIN;
terminal AND;
terminal OR;
terminal LQ;
terminal GT;
terminal GQ;
terminal NQ;
terminal FOR;
terminal VAR;
terminal PROGRAM;
terminal COL;
terminal INTEGER;
terminal BOOLEAN;
terminal ARRAY;
terminal OF;
terminal DOT;
terminal COMMA;
terminal LB;
terminal RB;
terminal FUNCTION;
terminal TO;
terminal PROCEDURE;
terminal RETURN;

/* Simbolos No Terminales */
non terminal program;
non terminal NodoBase declaraciones;
non terminal NodoBase stmt;
non terminal NodoBase if_stmt;
non terminal NodoBase repeat_stmt;
non terminal NodoBase while_stmt;
non terminal NodoBase assign_stmt;
non terminal NodoBase read_stmt;
non terminal NodoBase write_stmt;
non terminal NodoBase exp;
non terminal NodoBase simple_exp;
non terminal NodoBase term;
non terminal NodoBase factor;
non terminal begin;
/* Nuestros no terminales */
non terminal NodoBase programa;
non terminal NodoBase cuerpo;
non terminal NodoBase var_dec_p;
non terminal NodoVar var_dec;
non terminal NodoBase dec;
non terminal NodoBase type;
non terminal NodoBase simp_type;
non terminal NodoBase arr_type;
non terminal NodoBase ind_range; 
non terminal NodoBase func_dec_p;
non terminal NodoBase argumentos;
non terminal NodoBase stm;
non terminal NodoBase lista_declaraciones;
non terminal NodoBase for_stmt;
non terminal NodoBase args_stmt;
non terminal NodoBase var_p;
non terminal NodoBase func_p;
non terminal NodoBase exp_and;
non terminal NodoBase exp_logica;
non terminal NodoBase lista;
non terminal NodoBase proc_p;
non terminal NodoBase proc_dec_p;
non terminal String func_type;

/* Precedencia de operadores */
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left OR;
precedence left AND;


/* REGLAS GRAMATICALES */

program ::= PROGRAM ID:nombre SEMI cuerpo:bdy  
			{: 
				if(debug) System.out.println("\t regla 1");
				
				 ast = new NodoProgram(nombre, bdy);		
				
				System.out.println(ast);
			:}
			;
cuerpo ::= var_p:vars func_p:funs proc_p:procs stm:stm 
		{:	
			if(debug) System.out.println("\t declaracion de variables");
			 RESULT = new NodoMain(vars, funs, procs, stm);

		:}
		;
		
proc_p ::= PROCEDURE proc_dec_p:proc proc_p:procp
			{:
				NodoBase hijoActual = proc;
					
					if (hijoActual != null) {
						while(hijoActual.TieneHermano()) {
							hijoActual = hijoActual.getHermanoDerecha();
						}
						hijoActual.setHermanoDerecha(procp);
						RESULT = proc;
					} else {
						RESULT = procp;
					}
			:}
			| 
			{:
				RESULT = null;
			:}
			;
			
proc_dec_p ::= ID:np argumentos:args SEMI stm:stm 
				{:
					if(debug) System.out.println("\t declara procedure");
					RESULT = new NodoProcedure(np, stm, args, 0); 
				:} 
				;				
		
	
var_p ::= VAR var_dec_p:var_dec_p 
			{:
				RESULT = var_dec_p;
			:}
			| {:RESULT = null; :}
			;	
			
var_dec_p ::= var_dec_p:var_dec_p SEMI  
			{: 
				if (debug) System.out.println("\t declara variable regla 3.1"); 
				 this.nodoarray = null;
				RESULT = var_dec_p;
			:}
			| var_dec_p:var_dec_p SEMI  var_dec:var_dec   
			{: 
				if (debug) System.out.println("\t declara variable  regla 3.2"); 
				NodoVar hijoActual1 = var_dec;
			   hijoActual1.setType_var(tipo);
			   if (this.nodoarray != null)
			   		hijoActual1.setArray(this.nodoarray);
			   while( hijoActual1.TieneHermano() ){
			   	
			   	hijoActual1 = (NodoVar)hijoActual1.getHermanoDerecha();
			   	hijoActual1.setType_var(tipo);
			   
			   } 
			   this.nodoarray = null;
			   NodoBase hijoActual = var_dec_p;
				if(hijoActual !=null){
					
					while(hijoActual.TieneHermano()){
						hijoActual = hijoActual.getHermanoDerecha();
					}
						hijoActual.setHermanoDerecha(var_dec);
						RESULT = var_dec_p;
					}else{
						RESULT = var_dec;
				}
				 this.nodoarray = null;
			:}
			| var_dec:var_dec 
			{: 
				if (debug) System.out.println("\t declara variable regla 3,3");
				
				 NodoVar hijoActual1 = var_dec;
			   	hijoActual1.setType_var(tipo);
			   	while( hijoActual1.TieneHermano() ){
			   		
			   		hijoActual1 = (NodoVar)hijoActual1.getHermanoDerecha();
			   		hijoActual1.setType_var(tipo);			   					   	
			   
			   	} 		   	   	
			   
			   RESULT = (NodoBase)var_dec;
			:} 
			;
			
func_p ::= FUNCTION func_dec_p:func func_p:funcp
			{:
				NodoBase hijoActual = func;
					
					if (hijoActual != null) {
						while(hijoActual.TieneHermano()) {
							hijoActual = hijoActual.getHermanoDerecha();
						}
						hijoActual.setHermanoDerecha(funcp);
						RESULT = func;
					} else {
						RESULT = funcp;
					}
			:}
			| 
			{:
				RESULT = null; 
			:}
			;			
						
func_dec_p ::=  func_type:func_type ID:nf argumentos:args stm:stm 
				{:
				 	if (debug) System.out.println("\t Declaracion de la funcion"+nf);
				 	
				 	RESULT = new NodoFuncion(func_type, nf, args, 0, stm);
				:}
				;		
				 
argumentos ::= LPAREN var_dec_p:vars RPAREN 
				{:
					if (debug) System.out.println("\t regla 8 Argumentos");
					RESULT = vars;
				:}
				| LPAREN RPAREN 
				{:
					if (debug) System.out.println("\t funcion sin parametros");
					RESULT = null;	
				:}			
				;
				
lista ::= declaraciones:dec 
				{:
					RESULT=dec;
				:}
				| stm:stm
				{:
					RESULT=stm;
				:};		
				
stm ::= BEGIN lista_declaraciones:ldec END SEMI 
				{:
					System.out.println("\t lista de declaraciones");
					RESULT = new NodoBegin(ldec);
				:}
				;				
				
lista_declaraciones ::= declaraciones:dec
				{:
					if (debug) System.out.println("\t Regla 1 declaraciones");
					
					RESULT = dec;
				:} 
				|
				declaraciones:dec lista_declaraciones:lista  
				{:
					if (debug) System.out.println("\t Regla 2 declaraciones");
					
					NodoBase hijoActual = dec;
					
					if (hijoActual != null) {
						while(hijoActual.TieneHermano()) {
							hijoActual = hijoActual.getHermanoDerecha();
						}
						hijoActual.setHermanoDerecha(lista);
						RESULT = dec;
					} else {
						RESULT = lista;
					}
				:}	
				; 
				

var_dec	::= var_dec:var_dec COMMA dec:dec 
			{:
				if (debug) System.out.println("\t regla 4.2");
				NodoVar hijoActual = var_dec;
					if(hijoActual !=null){   
						if (this.nodoarray != null)
			   				hijoActual.setArray(this.nodoarray);
						while(hijoActual.TieneHermano()){
							hijoActual = (NodoVar) hijoActual.getHermanoDerecha();	
							if(this.nodoarray != null){
								((NodoVar) hijoActual).setArray(this.nodoarray);
							}
						}
						hijoActual.setHermanoDerecha(dec);
						RESULT = var_dec;
						 this.nodoarray = null;
					}else{
						RESULT = (NodoVar)dec;
					}
			:}
			|
			dec:dec 
			{:
				if (debug) System.out.println("\t regla 4.1"); 
				if(this.nodoarray != null){
					System.out.println("llego el nodo array");
					NodoVar var = (NodoVar)dec;
					var.setArray(this.nodoarray);
					RESULT = var;
				} else {
					RESULT = (NodoVar)dec;
				}
				
			:}			
			;
			
dec 	::= dec:dec COL type:type 
			{:
				
				if(this.nodoarray != null){
					System.out.println("llego el nodo array");
					NodoVar var = (NodoVar)dec;
					var.setArray(this.nodoarray);
					RESULT = var;
				} else {
					RESULT = (NodoVar)dec;
				}

			:}
			| 
			ID:nombre 
			{:
				if (debug) System.out.println("\t nombre de variable: "+nombre);
				
				RESULT = new NodoVar(nombre,"");

			:}
			;				
								

type	::= simp_type:simp_type 
			{:
				if (debug) System.out.println("\t regla 6.1");	
				RESULT = simp_type;			
			:} 
			| arr_type:arr_type 
			{:
				if (debug) System.out.println("\t regla 6.2");
			   RESULT = arr_type;
			:}
			;
			

arr_type ::= ARRAY LB ind_range:rango RB OF simp_type	
			{:
				if (debug) System.out.println("\t regla 7");
				RESULT = rango;
			:} 
			;
			
func_type ::= INTEGER 
			{:
				RESULT = "Integer";
			:}
			|
			BOOLEAN 
			{:
				RESULT = "Boolean";
			:}
			;

simp_type ::= INTEGER 
				{:
					if (debug) System.out.println("type Integer");
					this.tipo = "Integer";
					RESULT = null;
					
				:} 
				| BOOLEAN 
				{:
					if (debug) System.out.println("type Boolean");
					this.tipo = "Boolean";
					RESULT = null;
					
				:} 
				;

ind_range ::= NUM:ni DOT DOT NUM:nd 
				{:
					if (debug) System.out.println("Array entre"+ni+" "+nd);
					this.nodoarray = new NodoArray(Integer.parseInt(ni),Integer.parseInt(nd));					
					RESULT = this.nodoarray;
					
				:}
				;		
declaraciones   ::= if_stmt:sif	
				{: 
					if(debug) System.out.println("\t regla 3a"); 
					RESULT = sif;
				:}
            	| repeat_stmt:srep	
            	{: 
            		if(debug) System.out.println("\t regla 3b"); 
            		RESULT = srep;
				:}
		   		| while_stmt:wrep	
		   		{: 
		   			if(debug) System.out.println("\t regla 3f"); 
		   			RESULT = wrep;
				:}
				| for_stmt:fdec 
				{: 
					if (debug) System.out.println("\t regla del for");
					RESULT = fdec;
				:}
            	| assign_stmt:sasi SEMI	
            	{: 
            		if(debug) System.out.println("\t regla 3c"); 
            		RESULT = sasi;

				:}
            	| read_stmt:slec SEMI	
            	{: 
            		if(debug) System.out.println("\t regla 3d"); 
				:}
            	| write_stmt:sesc SEMI	
            	{:
            		if(debug) System.out.println("\t regla 3e"); 
            		RESULT = sesc;
				:}
				|RETURN exp:ex SEMI
				{:
					RESULT = new NodoReturn(ex);
				:}	
				| RETURN SEMI
				{:
					RESULT = new NodoReturn(null);
				:}			
            	| error	{: if(debug) System.out.println("\t regla 3f"); 
				System.out.println("Ocurrio error en cup # 0004");
				:}
            ;


if_stmt     ::= IF exp:ex THEN lista:pthen END SEMI
				{: 
					if(debug) System.out.println("\t regla 4a"); 
					
					RESULT = new NodoIf(ex, pthen);
				:}
				| 
				IF exp:ex THEN lista:pthen ELSE lista:pelse END SEMI
				{:
			 		if(debug) System.out.println("\t regla 4b"); 
			 		
			 		RESULT = new NodoIf(ex, pthen, pelse);
				:}
				;

repeat_stmt ::= REPEAT lista:cuerpo UNTIL exp:prueba	
			{: 
				if(debug) System.out.println("\t regla 5");
				RESULT = new NodoRepeat(cuerpo,prueba); 

			:}
			;
		
while_stmt ::= WHILE exp:prueba DO lista:cuerpo	
			{: 
				if(debug) System.out.println("\t regla 5w"); 
				
				RESULT = new NodoWhile(prueba, cuerpo);
			:}
			;		



for_stmt ::= FOR assign_stmt:ex TO term:ter DO lista:cuerpo 
			{:
				if (debug) System.out.println("\t declaracion del for");
				RESULT = new NodoFor(ex, ter, cuerpo);
			:}
			;		

assign_stmt ::= ID:variable 	
			{: 
				if(debug) System.out.println("\t regla 6 parte del medio"); 
				//String nombre = variable.getName();
			:}
			ASSIGN exp:ex	
			{: 
				if(debug) System.out.println("\t regla 6 parte final");
				
				if (variable != null) {
				
					RESULT = new NodoAsignacion(variable.toString(), ex);
				
				} else {
				
					RESULT = null;
					
					System.out.println("\t ocurrio error en cup");
				
				}
			:}
			;

read_stmt   ::= READ exp 
			{: if(debug) System.out.println("\t regla 7"); 
				System.out.println("Leyendo Variable");
			:}
			;

write_stmt  ::= WRITE term:ex	
			{: 
				if(debug) System.out.println("\t regla 8");
				
				RESULT = new NodoEscribir(ex); 
			:}
		;
		
exp ::= exp OR exp_and:ex 
			{:
				if (debug) System.out.println("\t regla 9a con or"); 
			:}
		| 
		exp_and:ex 
			{: 
				if (debug) System.out.println("\t regla 9a sin or");
				
				RESULT = ex; 
			:}
		;
		
exp_and ::= exp_and AND	exp_logica {: if (debug) System.out.println("\t regla 9b con and"); :}
		|
		exp_logica:ex
			{: 
				if (debug) System.out.println("\t regla 9b sin and");
				
				RESULT = ex;
			:}
		;				

exp_logica ::= simple_exp:exI LT simple_exp:exD	{: if(debug) System.out.println("\t regla 9a"); 
								:} 
		| simple_exp LQ simple_exp 
			{: 
				if (debug) System.out.println("\t regla 9d"); 
			:}
		| simple_exp GT simple_exp 
			{: 
				if (debug) System.out.println("\t regla 9e");	
			:}
		| simple_exp GQ simple_exp 
			{: 
				if (debug) System.out.println("\t regla 9f"); 
			:}	
		| simple_exp NQ simple_exp 
			{: 
				if (debug) System.out.println("\t regla 9h"); 
			:}					
		| simple_exp:exI EQ simple_exp:exD	
			{: 
				if(debug) System.out.println("\t regla 9b"); 
				RESULT = new NodoOperacion(exI, tipoOp.igual, exD);
			:}
		| NQ simple_exp 
			{: 
				if (debug) System.out.println("\t regla 9i"); 
			:}
		| simple_exp:ex	
			{: 
				if(debug) System.out.println("\t regla 9c");
				RESULT = ex; 
			:}
		;
		 
args_stmt ::= exp COMMA args_stmt 
			{:
				if (debug) System.out.println("\t argumentos");
			:}
			|
			exp 
			{:
				if (debug) System.out.println("\t argumento");
			:}
			;


simple_exp  ::= simple_exp:exI PLUS term:exD	
				{: 
					if(debug) System.out.println("\t regla 10a"); 
					RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
				:}
		| simple_exp:exI MINUS term:exD	
				{: 
					if(debug) System.out.println("\t regla 10b"); 
				:}
		| term:ex	
				{: 
					if(debug) System.out.println("\t regla 10c"); 
					RESULT=ex;
				:}
		;

term        ::= term:exI TIMES factor:exD	
				{: 
					if(debug) System.out.println("\t regla 11a"); 
				:}
		| term:exI OVER factor:exD	
				{: 
					if(debug) System.out.println("\t regla 11b"); 
				:}
		| factor:fact	
				{: 
					if(debug) System.out.println("\t regla 11c"); 
					RESULT = fact;
				:}
		;

factor      ::= LPAREN exp:ex RPAREN	
				{: 
					if(debug) System.out.println("\t regla 12a"); 
					RESULT= ex;
				:}
		| NUM:valor	
				{: 
					if(debug) System.out.println("\t regla 12b");
				 
						System.out.println("Devolvi nodo numero entero");
					
						if (valor != null) {
							RESULT = new NodoValor(Integer.parseInt(valor));
						} else { 
							RESULT = null;
							System.out.println("\t ERROR en cup ");
						}
					
				:}
		| ID:variable	
				{: 
					if(debug) System.out.println("\t regla 12c");
				
					if(variable != null){
						System.out.println("\t contruyendo nodoId para lexema:"+variable.toString());
						RESULT = new NodoIdentificador(variable.toString());
					}
				
		
				:}
		| error	
				{: 
					if(debug) System.out.println("\t regla 12d"); 
				:}
		| ID:nom LPAREN RPAREN 
				{: 
					if (debug) System.out.println("\t regla 12e"); 
				:}
		| ID:nom LPAREN args_stmt RPAREN 
				{: 
					if (debug) System.out.println("\t regla 12f"); 
				:}
		;					
				