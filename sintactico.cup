package Tiny;

import java_cup.runtime.*;
import ast.*;
//import otros.*;

parser code {:

/***********
SymbolFactory es una nueva caracteristica que ha sido a�adida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha informaci�n de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/
	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		parser parser_obj;
		if (args.length==0) 
			parser_obj=new parser(new Scanner(System.in,sf),sf);
		else 
			parser_obj=new parser(new Scanner(new java.io.FileInputStream(args[0]),sf),sf);

		parser_obj.parse();
		/*NodoBase root=parser_obj.action_obj.getASTroot();
		System.out.println();
		System.out.println("IMPRESION DEL AST GENERADO");
		System.out.println();
		ast.Util.imprimirAST(root);
		TablaSimbolos ts = new TablaSimbolos();
		ts.cargarTabla(root);
		ts.ImprimirClaves();
		Tiny.Generador.setTablaSimbolos(ts);
		Tiny.Generador.generarCodigoObjeto(root);*/
	}

:}

action code {:
	private boolean debug=true;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
	
:}

/* Simbolos Terminales */

terminal IF;
terminal THEN;
terminal ELSE;
terminal END;
terminal REPEAT;
terminal WHILE;
terminal DO;
terminal UNTIL;
terminal READ;
terminal WRITE;
terminal String ID;
terminal String NUM;
terminal ASSIGN;
terminal EQ;
terminal LT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal OVER;
terminal LPAREN;
terminal RPAREN;
terminal SEMI;
terminal BEGIN;
terminal AND;
terminal OR;
terminal LQ;
terminal GT;
terminal GQ;
terminal NQ;
terminal FOR;
terminal VAR;
terminal PROGRAM;
terminal COL;
terminal INTEGER;
terminal BOOLEAN;
terminal ARRAY;
terminal OF;
terminal DOT;
terminal COMMA;
terminal LB;
terminal RB;
terminal FUNCTION;

/* Simbolos No Terminales */
non terminal program;
non terminal NodoBase stmt_seq;
non terminal NodoBase stmt;
non terminal NodoBase if_stmt;
non terminal NodoBase repeat_stmt;
non terminal NodoBase while_stmt;
non terminal NodoBase do_while_stmt;
non terminal NodoBase assign_stmt;
non terminal NodoBase read_stmt;
non terminal NodoBase write_stmt;
non terminal NodoBase exp;
non terminal NodoBase simple_exp;
non terminal NodoBase term;
non terminal NodoBase factor;
non terminal begin;
/* Nuestros no terminales */
non terminal programa;
non terminal cuerpo;
non terminal var_dec_p;
non terminal var_dec;
non terminal dec;
non terminal type;
non terminal simp_type;
non terminal arr_type;
non terminal ind_range; 
non terminal func_dec_p;
non terminal argumentos;
non terminal stm;
non terminal lista_declaraciones;

/* Precedencia de operadores */
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;


/* REGLAS GRAMATICALES */

program ::= PROGRAM ID SEMI cuerpo {: 

					if(debug) System.out.println("\t regla 1");
			
				:}
			;
			
cuerpo ::= var_dec_p func_dec_p  {:	
	if(debug) System.out.println("\t declaracion de variables");		
	:}
	;
	
var_dec_p ::= VAR var_dec_p SEMI  {: if (debug) System.out.println("\t regla 3.1"); :}
			| var_dec_p SEMI  var_dec   {: if (debug) System.out.println("\t regla 3.2"); :}
			| var_dec   {: if (debug) System.out.println("\t regla 3,3");:} 
			;
						
func_dec_p ::= FUNCTION simp_type ID:nf argumentos stm {:
				 if (debug) System.out.println("\t Declaracion de la funcion"+nf);
				 :}
				 ;		
				 
argumentos ::= LPAREN var_dec RPAREN {:
				if (debug) System.out.println("\t regla 8 Argumentos");
				:}
				|
				;		
				
stm ::= BEGIN lista_declaraciones END SEMI {:
					System.out.println("\t lista de declaraciones");
				:}	
				;				
				
lista_declaraciones ::= declaraciones SEMI {:
					if (debug) System.out.println("\t Regla 1 declaraciones");
				:} 
				|
				lista_declaraciones declaraciones {:
					if (debug) System.out.println("\t Regla 2 declaraciones");
				:}	
				; 

var_dec	 ::= var_dec COMMA dec {:
				if (debug) System.out.println("\t regla 4.2");
			:}
			|
			dec {:
				if (debug) System.out.println("\t regla 4.1"); 
			:}
			;
			
dec 	::= dec COL type  {:
				if (debug) System.out.println("\t regla 5.2");
			:}
			| 
			ID:nombre {:
				if (debug) System.out.println("\t nombre de variable: "+nombre);		 
			:}
			;				
								

type	::= simp_type {:
				if (debug) System.out.println("\t regla 6.1");				
			:} 
			| arr_type {:
				if (debug) System.out.println("\t regla 6.2");
			:}
			;
			

arr_type ::= ARRAY LB ind_range RB OF simp_type	{:
				if (debug) System.out.println("\t regla 7");
			:} 
			;

simp_type ::= INTEGER {:
					if (debug) System.out.println("type Integer");
				:} 
				| BOOLEAN {:
					if (debug) System.out.println("type Boolean");
				:} 
				;

ind_range ::= NUM:ni DOT DOT NUM:nd {:
					if (debug) System.out.println("Array entre"+ni+" "+nd);
				:}
				;			
				