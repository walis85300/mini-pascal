
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 05 23:33:39 BOT 2016
//----------------------------------------------------

package Tiny;

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 05 23:33:39 BOT 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\006\000\002\002\004\000\002\021" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\003" +
    "\000\002\031\007\000\002\032\005\000\002\032\004\000" +
    "\002\033\006\000\002\034\003\000\002\034\004\000\002" +
    "\023\005\000\002\023\003\000\002\024\005\000\002\024" +
    "\003\000\002\025\003\000\002\025\003\000\002\027\010" +
    "\000\002\026\003\000\002\026\003\000\002\030\006\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\003\000\002\005\010\000\002\005\012" +
    "\000\002\006\006\000\002\007\006\000\002\035\010\000" +
    "\002\040\002\000\002\010\006\000\002\011\004\000\002" +
    "\012\004\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\003\000\002\013\005\000\002\036\003\000" +
    "\002\036\003\000\002\037\005\000\002\037\003\000\002" +
    "\014\005\000\002\014\005\000\002\014\003\000\002\015" +
    "\005\000\002\015\005\000\002\015\003\000\002\016\005" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\005\000\002\016\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\004\043\005\001\002\000\004\002\211\001" +
    "\002\000\004\016\006\001\002\000\004\031\007\001\002" +
    "\000\006\016\011\042\010\001\002\000\006\016\011\042" +
    "\010\001\002\000\014\030\ufff2\031\ufff2\044\ufff2\052\ufff2" +
    "\055\ufff2\001\002\000\006\031\041\055\042\001\002\000" +
    "\004\002\001\001\002\000\010\031\ufffc\052\036\055\ufffc" +
    "\001\002\000\014\030\ufff4\031\ufff4\044\016\052\ufff4\055" +
    "\ufff4\001\002\000\010\045\017\046\023\047\024\001\002" +
    "\000\016\016\uffee\030\uffee\031\uffee\044\uffee\052\uffee\055" +
    "\uffee\001\002\000\014\030\ufff0\031\ufff0\044\ufff0\052\ufff0" +
    "\055\ufff0\001\002\000\014\030\ufff3\031\ufff3\044\ufff3\052" +
    "\ufff3\055\ufff3\001\002\000\014\030\ufff1\031\ufff1\044\ufff1" +
    "\052\ufff1\055\ufff1\001\002\000\016\016\uffed\030\uffed\031" +
    "\uffed\044\uffed\052\uffed\055\uffed\001\002\000\004\053\025" +
    "\001\002\000\004\017\026\001\002\000\004\051\033\001" +
    "\002\000\004\054\030\001\002\000\004\050\031\001\002" +
    "\000\006\045\017\046\023\001\002\000\014\030\uffef\031" +
    "\uffef\044\uffef\052\uffef\055\uffef\001\002\000\004\051\034" +
    "\001\002\000\004\017\035\001\002\000\004\054\uffec\001" +
    "\002\000\004\016\011\001\002\000\014\030\ufff5\031\ufff5" +
    "\044\016\052\ufff5\055\ufff5\001\002\000\004\032\053\001" +
    "\002\000\004\016\011\001\002\000\006\045\017\046\023" +
    "\001\002\000\004\016\044\001\002\000\004\027\046\001" +
    "\002\000\004\032\053\001\002\000\006\016\011\030\047" +
    "\001\002\000\004\032\ufff9\001\002\000\006\030\051\052" +
    "\036\001\002\000\004\032\ufffa\001\002\000\004\032\ufffb" +
    "\001\002\000\022\003\071\004\067\010\055\011\056\014" +
    "\054\015\073\016\070\041\061\001\002\000\004\016\204" +
    "\001\002\000\022\003\071\004\067\010\055\011\056\014" +
    "\054\015\073\016\070\041\061\001\002\000\012\003\077" +
    "\016\076\017\075\027\103\001\002\000\030\003\uffea\004" +
    "\uffea\006\uffea\007\uffea\010\uffea\011\uffea\013\uffea\014\uffea" +
    "\015\uffea\016\uffea\041\uffea\001\002\000\030\003\uffeb\004" +
    "\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\016\uffeb\041\uffeb\001\002\000\004\016\070\001" +
    "\002\000\004\031\170\001\002\000\004\031\167\001\002" +
    "\000\026\003\ufff7\004\ufff7\007\ufff7\010\ufff7\011\ufff7\013" +
    "\ufff7\014\ufff7\015\ufff7\016\ufff7\041\ufff7\001\002\000\004" +
    "\031\166\001\002\000\030\003\uffe9\004\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\041\uffe9\001\002\000\012\003\077\016\076\017\075\027" +
    "\103\001\002\000\004\020\uffde\001\002\000\030\003\uffe4" +
    "\004\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\016\uffe4\041\uffe4\001\002\000\024\003\071" +
    "\004\067\007\147\010\055\011\056\014\054\015\073\016" +
    "\070\041\061\001\002\000\012\003\077\016\076\017\075" +
    "\027\103\001\002\000\030\003\uffe8\004\uffe8\006\uffe8\007" +
    "\uffe8\010\uffe8\011\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8" +
    "\041\uffe8\001\002\000\074\003\uffc7\004\uffc7\005\uffc7\006" +
    "\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7" +
    "\015\uffc7\016\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025" +
    "\uffc7\026\uffc7\030\uffc7\031\uffc7\033\uffc7\034\uffc7\035\uffc7" +
    "\036\uffc7\037\uffc7\040\uffc7\041\uffc7\052\uffc7\056\uffc7\001" +
    "\002\000\076\003\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6" +
    "\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016" +
    "\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6" +
    "\027\137\030\uffc6\031\uffc6\033\uffc6\034\uffc6\035\uffc6\036" +
    "\uffc6\037\uffc6\040\uffc6\041\uffc6\052\uffc6\056\uffc6\001\002" +
    "\000\074\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010" +
    "\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\030" +
    "\uffc5\031\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\052\uffc5\056\uffc5\001\002\000\074\003" +
    "\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9" +
    "\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\021\uffc9\022" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\030\uffc9\031\uffc9" +
    "\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041" +
    "\uffc9\052\uffc9\056\uffc9\001\002\000\074\003\uffcc\004\uffcc" +
    "\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013" +
    "\uffcc\014\uffcc\015\uffcc\016\uffcc\021\uffcc\022\uffcc\023\uffcc" +
    "\024\uffcc\025\126\026\125\030\uffcc\031\uffcc\033\uffcc\034" +
    "\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\052\uffcc" +
    "\056\uffcc\001\002\000\070\003\uffd4\004\uffd4\005\uffd4\006" +
    "\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\021\113\022\114\023\116\024\121\030" +
    "\uffd4\031\uffd4\033\uffd4\034\uffd4\035\117\036\115\037\120" +
    "\040\122\041\uffd4\052\uffd4\056\uffd4\001\002\000\012\003" +
    "\077\016\076\017\075\027\103\001\002\000\010\031\uffdb" +
    "\033\105\034\107\001\002\000\012\003\uffd1\016\uffd1\017" +
    "\uffd1\027\uffd1\001\002\000\012\003\077\016\076\017\075" +
    "\027\103\001\002\000\012\003\uffd2\016\uffd2\017\uffd2\027" +
    "\uffd2\001\002\000\050\003\uffd3\004\uffd3\005\uffd3\006\uffd3" +
    "\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015" +
    "\uffd3\016\uffd3\030\uffd3\031\uffd3\033\uffd3\034\uffd3\041\uffd3" +
    "\052\uffd3\056\uffd3\001\002\000\010\030\112\033\105\034" +
    "\107\001\002\000\074\003\uffc8\004\uffc8\005\uffc8\006\uffc8" +
    "\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015" +
    "\uffc8\016\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8" +
    "\026\uffc8\030\uffc8\031\uffc8\033\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\037\uffc8\040\uffc8\041\uffc8\052\uffc8\056\uffc8\001\002" +
    "\000\012\003\077\016\076\017\075\027\103\001\002\000" +
    "\012\003\077\016\076\017\075\027\103\001\002\000\012" +
    "\003\077\016\076\017\075\027\103\001\002\000\012\003" +
    "\077\016\076\017\075\027\103\001\002\000\012\003\077" +
    "\016\076\017\075\027\103\001\002\000\012\003\077\016" +
    "\076\017\075\027\103\001\002\000\012\003\077\016\076" +
    "\017\075\027\103\001\002\000\012\003\077\016\076\017" +
    "\075\027\103\001\002\000\054\003\uffd6\004\uffd6\005\uffd6" +
    "\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014" +
    "\uffd6\015\uffd6\016\uffd6\023\116\024\121\030\uffd6\031\uffd6" +
    "\033\uffd6\034\uffd6\041\uffd6\052\uffd6\056\uffd6\001\002\000" +
    "\074\003\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd" +
    "\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\021" +
    "\uffcd\022\uffcd\023\uffcd\024\uffcd\025\126\026\125\030\uffcd" +
    "\031\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\041\uffcd\052\uffcd\056\uffcd\001\002\000\012\003\077" +
    "\016\076\017\075\027\103\001\002\000\012\003\077\016" +
    "\076\017\075\027\103\001\002\000\074\003\uffcb\004\uffcb" +
    "\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013" +
    "\uffcb\014\uffcb\015\uffcb\016\uffcb\021\uffcb\022\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\030\uffcb\031\uffcb\033\uffcb\034" +
    "\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\052\uffcb" +
    "\056\uffcb\001\002\000\074\003\uffca\004\uffca\005\uffca\006" +
    "\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca" +
    "\015\uffca\016\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025" +
    "\uffca\026\uffca\030\uffca\031\uffca\033\uffca\034\uffca\035\uffca" +
    "\036\uffca\037\uffca\040\uffca\041\uffca\052\uffca\056\uffca\001" +
    "\002\000\054\003\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\023\116\024\121\030\uffd7\031\uffd7\033\uffd7\034\uffd7" +
    "\041\uffd7\052\uffd7\056\uffd7\001\002\000\054\003\uffd9\004" +
    "\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9" +
    "\013\uffd9\014\uffd9\015\uffd9\016\uffd9\023\116\024\121\030" +
    "\uffd9\031\uffd9\033\uffd9\034\uffd9\041\uffd9\052\uffd9\056\uffd9" +
    "\001\002\000\074\003\uffce\004\uffce\005\uffce\006\uffce\007" +
    "\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce" +
    "\016\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\126\026" +
    "\125\030\uffce\031\uffce\033\uffce\034\uffce\035\uffce\036\uffce" +
    "\037\uffce\040\uffce\041\uffce\052\uffce\056\uffce\001\002\000" +
    "\054\003\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8" +
    "\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\023" +
    "\116\024\121\030\uffd8\031\uffd8\033\uffd8\034\uffd8\041\uffd8" +
    "\052\uffd8\056\uffd8\001\002\000\054\003\uffda\004\uffda\005" +
    "\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda" +
    "\014\uffda\015\uffda\016\uffda\023\116\024\121\030\uffda\031" +
    "\uffda\033\uffda\034\uffda\041\uffda\052\uffda\056\uffda\001\002" +
    "\000\054\003\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010" +
    "\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\023\116\024\121\030\uffd5\031\uffd5\033\uffd5\034\uffd5\041" +
    "\uffd5\052\uffd5\056\uffd5\001\002\000\014\003\077\016\076" +
    "\017\075\027\103\030\141\001\002\000\012\030\uffcf\033" +
    "\105\034\107\052\144\001\002\000\074\003\uffc4\004\uffc4" +
    "\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013" +
    "\uffc4\014\uffc4\015\uffc4\016\uffc4\021\uffc4\022\uffc4\023\uffc4" +
    "\024\uffc4\025\uffc4\026\uffc4\030\uffc4\031\uffc4\033\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\052\uffc4" +
    "\056\uffc4\001\002\000\004\030\143\001\002\000\074\003" +
    "\uffc3\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3" +
    "\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\021\uffc3\022" +
    "\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\030\uffc3\031\uffc3" +
    "\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041" +
    "\uffc3\052\uffc3\056\uffc3\001\002\000\012\003\077\016\076" +
    "\017\075\027\103\001\002\000\004\030\uffd0\001\002\000" +
    "\026\003\ufff6\004\ufff6\007\ufff6\010\ufff6\011\ufff6\013\ufff6" +
    "\014\ufff6\015\ufff6\016\ufff6\041\ufff6\001\002\000\004\031" +
    "\150\001\002\000\034\002\ufff8\003\ufff8\004\ufff8\006\ufff8" +
    "\007\ufff8\010\ufff8\011\ufff8\013\ufff8\014\ufff8\015\ufff8\016" +
    "\ufff8\032\ufff8\041\ufff8\001\002\000\004\020\152\001\002" +
    "\000\012\003\077\016\076\017\075\027\103\001\002\000" +
    "\012\031\uffdd\033\105\034\107\056\uffdd\001\002\000\010" +
    "\005\155\033\105\034\107\001\002\000\024\003\071\004" +
    "\067\010\055\011\056\014\054\015\073\016\070\032\053" +
    "\041\061\001\002\000\004\007\164\001\002\000\004\006" +
    "\160\001\002\000\022\003\071\004\067\010\055\011\056" +
    "\014\054\015\073\016\070\041\061\001\002\000\004\007" +
    "\162\001\002\000\004\031\163\001\002\000\030\003\uffe2" +
    "\004\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\013\uffe2\014" +
    "\uffe2\015\uffe2\016\uffe2\041\uffe2\001\002\000\004\031\165" +
    "\001\002\000\030\003\uffe3\004\uffe3\006\uffe3\007\uffe3\010" +
    "\uffe3\011\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\041\uffe3" +
    "\001\002\000\030\003\uffe6\004\uffe6\006\uffe6\007\uffe6\010" +
    "\uffe6\011\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\041\uffe6" +
    "\001\002\000\030\003\uffe7\004\uffe7\006\uffe7\007\uffe7\010" +
    "\uffe7\011\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\041\uffe7" +
    "\001\002\000\030\003\uffe5\004\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\041\uffe5" +
    "\001\002\000\004\056\172\001\002\000\004\017\173\001" +
    "\002\000\004\012\174\001\002\000\004\032\053\001\002" +
    "\000\030\003\uffdf\004\uffdf\006\uffdf\007\uffdf\010\uffdf\011" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\041\uffdf\001\002" +
    "\000\010\012\177\033\105\034\107\001\002\000\004\032" +
    "\053\001\002\000\030\003\uffe0\004\uffe0\006\uffe0\007\uffe0" +
    "\010\uffe0\011\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\041" +
    "\uffe0\001\002\000\024\003\071\004\067\010\055\011\056" +
    "\013\202\014\054\015\073\016\070\041\061\001\002\000" +
    "\012\003\077\016\076\017\075\027\103\001\002\000\034" +
    "\003\uffe1\004\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\033\105\034\107\041\uffe1" +
    "\001\002\000\004\031\uffdc\001\002\000\010\031\ufffd\052" +
    "\036\055\ufffd\001\002\000\004\002\uffff\001\002\000\004" +
    "\031\210\001\002\000\010\016\011\031\ufffe\055\ufffe\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\021\012\022\011" +
    "\023\013\024\014\001\001\000\010\022\206\023\013\024" +
    "\014\001\001\000\002\001\001\000\004\031\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\025\020\026\021\027\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\036\001" +
    "\001\000\002\001\001\000\004\033\205\001\001\000\006" +
    "\023\204\024\014\001\001\000\004\026\042\001\001\000" +
    "\002\001\001\000\004\032\044\001\001\000\004\033\051" +
    "\001\001\000\006\023\047\024\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\063\005\057\006\056\007\065\010\062\011" +
    "\064\012\061\034\071\035\073\001\001\000\002\001\001" +
    "\000\024\003\063\005\057\006\056\007\065\010\062\011" +
    "\064\012\061\034\200\035\073\001\001\000\012\013\175" +
    "\014\101\015\100\016\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\153\014\101\015\100\016\077" +
    "\001\001\000\004\040\150\001\001\000\002\001\001\000" +
    "\022\003\145\005\057\006\056\007\065\010\062\011\064" +
    "\012\061\035\073\001\001\000\012\013\103\014\101\015" +
    "\100\016\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\110\014\101" +
    "\015\100\016\077\001\001\000\004\036\105\001\001\000" +
    "\002\001\001\000\004\016\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\105\001\001\000\002\001" +
    "\001\000\010\014\135\015\100\016\077\001\001\000\010" +
    "\014\134\015\100\016\077\001\001\000\010\014\133\015" +
    "\100\016\077\001\001\000\006\015\132\016\077\001\001" +
    "\000\010\014\131\015\100\016\077\001\001\000\010\014" +
    "\130\015\100\016\077\001\001\000\006\015\123\016\077" +
    "\001\001\000\010\014\122\015\100\016\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\127\001\001" +
    "\000\004\016\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\013\137\014\101\015\100\016\077\037\141\001\001" +
    "\000\004\036\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\013\137\014\101\015\100" +
    "\016\077\037\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\013\152\014\101\015\100\016\077\001\001\000" +
    "\004\036\105\001\001\000\004\036\105\001\001\000\024" +
    "\003\156\005\057\006\056\007\065\010\062\011\064\012" +
    "\061\033\155\035\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\160\005\057\006\056\007\065\010" +
    "\062\011\064\012\061\035\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\174\001\001\000\002\001\001\000\004" +
    "\036\105\001\001\000\004\033\177\001\001\000\002\001" +
    "\001\000\022\003\145\005\057\006\056\007\065\010\062" +
    "\011\064\012\061\035\073\001\001\000\012\013\202\014" +
    "\101\015\100\016\077\001\001\000\004\036\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\204\024\014\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




/***********
SymbolFactory es una nueva caracteristica que ha sido a???adida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha informaci???n de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/
	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		parser parser_obj;
		if (args.length==0) 
			parser_obj=new parser(new Scanner(System.in,sf),sf);
		else 
			parser_obj=new parser(new Scanner(new java.io.FileInputStream(args[0]),sf),sf);

		parser_obj.parse();
		/*NodoBase root=parser_obj.action_obj.getASTroot();
		System.out.println();
		System.out.println("IMPRESION DEL AST GENERADO");
		System.out.println();
		ast.Util.imprimirAST(root);
		TablaSimbolos ts = new TablaSimbolos();
		ts.cargarTabla(root);
		ts.ImprimirClaves();
		Tiny.Generador.setTablaSimbolos(ts);
		Tiny.Generador.generarCodigoObjeto(root);*/
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	private boolean debug=true;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
	

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor ::= ID LPAREN args_stmt RPAREN 
            {
              NodoBase RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 if (debug) System.out.println("\t regla 12f"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // factor ::= ID LPAREN RPAREN 
            {
              NodoBase RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if (debug) System.out.println("\t regla 12e"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= error 
            {
              NodoBase RESULT =null;
		 if(debug) System.out.println("\t regla 12d"); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 12c"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= NUM 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 12b"); 
					System.out.println("Devolvi nodo numero entero");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= LPAREN exp RPAREN 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t regla 12a"); 
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // term ::= factor 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 11c"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // term ::= term OVER factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 11b"); 
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // term ::= term TIMES factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 11a"); 
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // simple_exp ::= term 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 10c"); 
				RESULT=ex;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // simple_exp ::= simple_exp MINUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 10b"); 
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // simple_exp ::= simple_exp PLUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 10a"); 
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // args_stmt ::= exp 
            {
              Object RESULT =null;
		
				if (debug) System.out.println("\t argumento");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_stmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // args_stmt ::= exp COMMA args_stmt 
            {
              Object RESULT =null;
		
				if (debug) System.out.println("\t argumentos");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_stmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // oplog ::= AND 
            {
              Object RESULT =null;
		 if (debug) System.out.println("\t operador and"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("oplog",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // oplog ::= OR 
            {
              Object RESULT =null;
		 if (debug) System.out.println("\t operador or"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("oplog",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp oplog factor 
            {
              NodoBase RESULT =null;
		 if (debug) System.out.println("\t regla 9g"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= simple_exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 9c"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= simple_exp EQ simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 9b"); 
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= simple_exp NQ simple_exp 
            {
              NodoBase RESULT =null;
		 if (debug) System.out.println("\t regla 9h"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= simple_exp GQ simple_exp 
            {
              NodoBase RESULT =null;
		 if (debug) System.out.println("\t regla 9f"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= simple_exp GT simple_exp 
            {
              NodoBase RESULT =null;
		 if (debug) System.out.println("\t regla 9e");	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= simple_exp LQ simple_exp 
            {
              NodoBase RESULT =null;
		 if (debug) System.out.println("\t regla 9d"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= simple_exp LT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 9a"); 
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // write_stmt ::= WRITE exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 8"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // read_stmt ::= READ ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 7"); 
					System.out.println("Leyendo Variable");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // assign_stmt ::= ID NT$0 ASSIGN exp 
            {
              NodoBase RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 6 parte final");
					
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$0 ::= 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 if(debug) System.out.println("\t regla 6 parte del medio"); 
				/*lineanum=1000; //Pasar/Obtener la linea correcta por el Simbolo
				String nombre = variable.getName();*/
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // for_stmt ::= FOR assign_stmt TO NUM DO stm 
            {
              Object RESULT =null;
		
				if (debug) System.out.println("\t declaracion del for");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // while_stmt ::= WHILE exp DO stm 
            {
              NodoBase RESULT =null;
		int pruebaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pruebaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase prueba = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cuerpo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 5w"); 
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // repeat_stmt ::= REPEAT lista_declaraciones UNTIL exp 
            {
              NodoBase RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cuerpo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pruebaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pruebaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase prueba = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 5"); 
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // if_stmt ::= IF exp THEN declaraciones ELSE declaraciones END SEMI 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pelseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pelseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase pelse = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(debug) System.out.println("\t regla 4b"); 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // if_stmt ::= IF exp THEN stm END SEMI 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pthen = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(debug) System.out.println("\t regla 4a"); 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaraciones ::= error 
            {
              NodoBase RESULT =null;
		 if(debug) System.out.println("\t regla 3f"); 
				System.out.println("Ocurrio error en cup # 0004");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaraciones ::= write_stmt SEMI 
            {
              NodoBase RESULT =null;
		int sescleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sescright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sesc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t regla 3e"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaraciones ::= read_stmt SEMI 
            {
              NodoBase RESULT =null;
		int slecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase slec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t regla 3d"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaraciones ::= assign_stmt SEMI 
            {
              NodoBase RESULT =null;
		int sasileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sasiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sasi = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t regla 3c"); 
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaraciones ::= for_stmt 
            {
              NodoBase RESULT =null;
		 if (debug) System.out.println("\t regla del for"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaraciones ::= while_stmt 
            {
              NodoBase RESULT =null;
		int wrepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wrepright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase wrep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 3f"); 
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaraciones ::= repeat_stmt 
            {
              NodoBase RESULT =null;
		int srepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srepright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase srep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 3b"); 
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaraciones ::= if_stmt 
            {
              NodoBase RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sif = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 3a"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ind_range ::= NUM DOT DOT NUM 
            {
              Object RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int niright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ni = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ndleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ndright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					if (debug) System.out.println("Array entre"+ni+" "+nd);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ind_range",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // simp_type ::= BOOLEAN 
            {
              Object RESULT =null;
		
					if (debug) System.out.println("type Boolean");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simp_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // simp_type ::= INTEGER 
            {
              Object RESULT =null;
		
					if (debug) System.out.println("type Integer");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simp_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // arr_type ::= ARRAY LB ind_range RB OF simp_type 
            {
              Object RESULT =null;
		
				if (debug) System.out.println("\t regla 7");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= arr_type 
            {
              Object RESULT =null;
		
				if (debug) System.out.println("\t regla 6.2");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= simp_type 
            {
              Object RESULT =null;
		
				if (debug) System.out.println("\t regla 6.1");				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // dec ::= ID 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				if (debug) System.out.println("\t nombre de variable: "+nombre);		 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // dec ::= dec COL type 
            {
              Object RESULT =null;
		
				if (debug) System.out.println("\t regla 5.2");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // var_dec ::= dec 
            {
              Object RESULT =null;
		
				if (debug) System.out.println("\t regla 4.1"); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // var_dec ::= var_dec COMMA dec 
            {
              Object RESULT =null;
		
				if (debug) System.out.println("\t regla 4.2");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_declaraciones ::= lista_declaraciones declaraciones 
            {
              Object RESULT =null;
		
					if (debug) System.out.println("\t Regla 2 declaraciones");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_declaraciones ::= declaraciones 
            {
              Object RESULT =null;
		
					if (debug) System.out.println("\t Regla 1 declaraciones");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stm ::= BEGIN lista_declaraciones END SEMI 
            {
              Object RESULT =null;
		
					System.out.println("\t lista de declaraciones");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // argumentos ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		
					if (debug) System.out.println("\t funcion sin parametros");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // argumentos ::= LPAREN var_dec RPAREN 
            {
              Object RESULT =null;
		
				if (debug) System.out.println("\t regla 8 Argumentos");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // func_dec_p ::= FUNCTION simp_type ID argumentos stm 
            {
              Object RESULT =null;
		int nfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String nf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				 if (debug) System.out.println("\t Declaracion de la funcion"+nf);
				 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_dec_p",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // var_dec_p ::= var_dec 
            {
              Object RESULT =null;
		 if (debug) System.out.println("\t declara variable regla 3,3");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec_p",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // var_dec_p ::= var_dec_p SEMI var_dec 
            {
              Object RESULT =null;
		 if (debug) System.out.println("\t declara variable  regla 3.2"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec_p",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // var_dec_p ::= VAR var_dec_p SEMI 
            {
              Object RESULT =null;
		 if (debug) System.out.println("\t declara variable regla 3.1"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec_p",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cuerpo ::= var_dec_p func_dec_p stm 
            {
              Object RESULT =null;
			
	if(debug) System.out.println("\t declaracion de variables");		
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM ID SEMI cuerpo 
            {
              Object RESULT =null;
		 

					if(debug) System.out.println("\t regla 1");
			
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

