
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 05 19:53:35 BOT 2016
//----------------------------------------------------

package Tiny;

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 05 19:53:35 BOT 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\023\000\002\002\006\000\002\002\004\000\002\022" +
    "\004\000\002\023\005\000\002\023\005\000\002\023\003" +
    "\000\002\032\007\000\002\033\005\000\002\033\002\000" +
    "\002\024\005\000\002\024\003\000\002\025\005\000\002" +
    "\025\003\000\002\026\003\000\002\026\003\000\002\030" +
    "\010\000\002\027\003\000\002\027\003\000\002\031\006" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\053\000\004\043\005\001\002\000\004\002\055\001" +
    "\002\000\004\016\006\001\002\000\004\031\007\001\002" +
    "\000\006\016\011\042\010\001\002\000\006\016\011\042" +
    "\010\001\002\000\014\030\ufff5\031\ufff5\044\ufff5\052\ufff5" +
    "\055\ufff5\001\002\000\006\031\041\055\042\001\002\000" +
    "\004\002\001\001\002\000\010\031\ufffc\052\036\055\ufffc" +
    "\001\002\000\014\030\ufff7\031\ufff7\044\016\052\ufff7\055" +
    "\ufff7\001\002\000\010\045\017\046\023\047\024\001\002" +
    "\000\016\016\ufff1\030\ufff1\031\ufff1\044\ufff1\052\ufff1\055" +
    "\ufff1\001\002\000\014\030\ufff3\031\ufff3\044\ufff3\052\ufff3" +
    "\055\ufff3\001\002\000\014\030\ufff6\031\ufff6\044\ufff6\052" +
    "\ufff6\055\ufff6\001\002\000\014\030\ufff4\031\ufff4\044\ufff4" +
    "\052\ufff4\055\ufff4\001\002\000\016\016\ufff0\030\ufff0\031" +
    "\ufff0\044\ufff0\052\ufff0\055\ufff0\001\002\000\004\053\025" +
    "\001\002\000\004\017\026\001\002\000\004\051\033\001" +
    "\002\000\004\054\030\001\002\000\004\050\031\001\002" +
    "\000\006\045\017\046\023\001\002\000\014\030\ufff2\031" +
    "\ufff2\044\ufff2\052\ufff2\055\ufff2\001\002\000\004\051\034" +
    "\001\002\000\004\017\035\001\002\000\004\054\uffef\001" +
    "\002\000\004\016\011\001\002\000\014\030\ufff8\031\ufff8" +
    "\044\016\052\ufff8\055\ufff8\001\002\000\004\002\uffff\001" +
    "\002\000\004\016\011\001\002\000\006\045\017\046\023" +
    "\001\002\000\004\016\044\001\002\000\004\027\046\001" +
    "\002\000\002\001\002\000\004\016\011\001\002\000\006" +
    "\030\050\052\036\001\002\000\002\001\002\000\004\002" +
    "\ufffb\001\002\000\010\031\ufffd\052\036\055\ufffd\001\002" +
    "\000\004\031\054\001\002\000\010\016\011\031\ufffe\055" +
    "\ufffe\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\053\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\022\012\023\011" +
    "\024\013\025\014\001\001\000\010\023\052\024\013\025" +
    "\014\001\001\000\002\001\001\000\004\032\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\026\020\027\021\030\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\051" +
    "\025\014\001\001\000\004\027\042\001\001\000\002\001" +
    "\001\000\004\033\044\001\001\000\004\034\050\001\001" +
    "\000\006\024\046\025\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\051\025\014\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




/***********
SymbolFactory es una nueva caracteristica que ha sido a???adida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha informaci???n de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/
	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		parser parser_obj;
		if (args.length==0) 
			parser_obj=new parser(new Scanner(System.in,sf),sf);
		else 
			parser_obj=new parser(new Scanner(new java.io.FileInputStream(args[0]),sf),sf);

		parser_obj.parse();
		/*NodoBase root=parser_obj.action_obj.getASTroot();
		System.out.println();
		System.out.println("IMPRESION DEL AST GENERADO");
		System.out.println();
		ast.Util.imprimirAST(root);
		TablaSimbolos ts = new TablaSimbolos();
		ts.cargarTabla(root);
		ts.ImprimirClaves();
		Tiny.Generador.setTablaSimbolos(ts);
		Tiny.Generador.generarCodigoObjeto(root);*/
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	private boolean debug=true;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
	

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ind_range ::= NUM DOT DOT NUM 
            {
              Object RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int niright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ni = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ndleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ndright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					if (debug) System.out.println("Array entre"+ni+" "+nd);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ind_range",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // simp_type ::= BOOLEAN 
            {
              Object RESULT =null;
		
					if (debug) System.out.println("type Boolean");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simp_type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // simp_type ::= INTEGER 
            {
              Object RESULT =null;
		
					if (debug) System.out.println("type Integer");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simp_type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // arr_type ::= ARRAY LB ind_range RB OF simp_type 
            {
              Object RESULT =null;
		
				if (debug) System.out.println("\t regla 7");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= arr_type 
            {
              Object RESULT =null;
		
				if (debug) System.out.println("\t regla 6.2");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= simp_type 
            {
              Object RESULT =null;
		
				if (debug) System.out.println("\t regla 6.1");				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // dec ::= ID 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				if (debug) System.out.println("\t nombre de variable: "+nombre);		 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dec ::= dec COL type 
            {
              Object RESULT =null;
		
				if (debug) System.out.println("\t regla 5.2");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_dec ::= dec 
            {
              Object RESULT =null;
		
				if (debug) System.out.println("\t regla 4.1"); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_dec ::= var_dec COMMA dec 
            {
              Object RESULT =null;
		
				if (debug) System.out.println("\t regla 4.2");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // argumentos ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // argumentos ::= LPAREN var_dec RPAREN 
            {
              Object RESULT =null;
		
				if (debug) System.out.println("\t regla 8 Argumentos");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // func_dec_p ::= FUNCTION simp_type ID argumentos stm 
            {
              Object RESULT =null;
		int nfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String nf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				 if (debug) System.out.println("\t Declaracion de la funcion"+nf);
				 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_dec_p",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // var_dec_p ::= var_dec 
            {
              Object RESULT =null;
		 if (debug) System.out.println("\t regla 3,3");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec_p",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // var_dec_p ::= var_dec_p SEMI var_dec 
            {
              Object RESULT =null;
		 if (debug) System.out.println("\t regla 3.2"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec_p",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // var_dec_p ::= VAR var_dec_p SEMI 
            {
              Object RESULT =null;
		 if (debug) System.out.println("\t regla 3.1"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec_p",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cuerpo ::= var_dec_p func_dec_p 
            {
              Object RESULT =null;
			
	if(debug) System.out.println("\t declaracion de variables");		
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM ID SEMI cuerpo 
            {
              Object RESULT =null;
		 

					if(debug) System.out.println("\t regla 1");
			
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

