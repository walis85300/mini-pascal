
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 07 22:11:12 BOT 2016
//----------------------------------------------------

package Tiny;

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 07 22:11:12 BOT 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\006\000\002\002\004\000\002\021" +
    "\006\000\002\044\002\000\002\037\004\000\002\037\002" +
    "\000\002\022\004\000\002\022\005\000\002\022\003\000" +
    "\002\040\005\000\002\040\002\000\002\031\006\000\002" +
    "\032\005\000\002\032\004\000\002\043\003\000\002\043" +
    "\003\000\002\033\006\000\002\034\003\000\002\034\004" +
    "\000\002\023\005\000\002\023\003\000\002\024\005\000" +
    "\002\024\003\000\002\025\003\000\002\025\003\000\002" +
    "\027\010\000\002\045\003\000\002\045\003\000\002\026" +
    "\003\000\002\026\003\000\002\030\006\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\003\000\002\005\010\000\002\005\012\000\002\006" +
    "\006\000\002\007\006\000\002\035\010\000\002\046\002" +
    "\000\002\010\006\000\002\011\004\000\002\012\004\000" +
    "\002\013\005\000\002\013\003\000\002\041\005\000\002" +
    "\041\003\000\002\042\005\000\002\042\005\000\002\042" +
    "\005\000\002\042\005\000\002\042\005\000\002\042\005" +
    "\000\002\042\004\000\002\042\003\000\002\036\005\000" +
    "\002\036\003\000\002\014\005\000\002\014\005\000\002" +
    "\014\003\000\002\015\005\000\002\015\005\000\002\015" +
    "\003\000\002\016\005\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\005\000\002\016\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\004\043\005\001\002\000\004\002\222\001" +
    "\002\000\004\016\006\001\002\000\004\031\007\001\002" +
    "\000\010\032\ufffc\042\010\055\ufffc\001\002\000\004\016" +
    "\025\001\002\000\004\002\001\001\002\000\006\032\ufff7" +
    "\055\014\001\002\000\004\032\ufffe\001\002\000\006\045" +
    "\015\046\020\001\002\000\004\016\uffe7\001\002\000\004" +
    "\016\022\001\002\000\006\032\ufff7\055\014\001\002\000" +
    "\004\016\uffe6\001\002\000\004\032\ufff8\001\002\000\004" +
    "\027\024\001\002\000\004\032\060\001\002\000\006\016" +
    "\025\030\027\001\002\000\016\030\uffeb\031\uffeb\032\uffeb" +
    "\044\uffeb\052\uffeb\055\uffeb\001\002\000\006\030\054\031" +
    "\055\001\002\000\004\032\ufff4\001\002\000\014\030\ufff9" +
    "\031\ufff9\032\ufff9\052\052\055\ufff9\001\002\000\016\030" +
    "\uffed\031\uffed\032\uffed\044\032\052\uffed\055\uffed\001\002" +
    "\000\010\045\033\046\037\047\040\001\002\000\016\030" +
    "\uffe5\031\uffe5\032\uffe5\044\uffe5\052\uffe5\055\uffe5\001\002" +
    "\000\016\030\uffe9\031\uffe9\032\uffe9\044\uffe9\052\uffe9\055" +
    "\uffe9\001\002\000\016\030\uffec\031\uffec\032\uffec\044\uffec" +
    "\052\uffec\055\uffec\001\002\000\016\030\uffea\031\uffea\032" +
    "\uffea\044\uffea\052\uffea\055\uffea\001\002\000\016\030\uffe4" +
    "\031\uffe4\032\uffe4\044\uffe4\052\uffe4\055\uffe4\001\002\000" +
    "\004\053\041\001\002\000\004\017\042\001\002\000\004" +
    "\051\047\001\002\000\004\054\044\001\002\000\004\050" +
    "\045\001\002\000\006\045\033\046\037\001\002\000\016" +
    "\030\uffe8\031\uffe8\032\uffe8\044\uffe8\052\uffe8\055\uffe8\001" +
    "\002\000\004\051\050\001\002\000\004\017\051\001\002" +
    "\000\004\054\uffe3\001\002\000\004\016\025\001\002\000" +
    "\016\030\uffee\031\uffee\032\uffee\044\032\052\uffee\055\uffee" +
    "\001\002\000\004\032\ufff5\001\002\000\014\016\025\030" +
    "\ufffb\031\ufffb\032\ufffb\055\ufffb\001\002\000\014\030\ufffa" +
    "\031\ufffa\032\ufffa\052\052\055\ufffa\001\002\000\006\032" +
    "\ufff6\055\ufff6\001\002\000\022\003\100\004\074\010\063" +
    "\011\062\014\061\015\076\016\075\041\066\001\002\000" +
    "\014\003\106\016\105\017\104\027\111\040\114\001\002" +
    "\000\014\003\106\016\105\017\104\027\111\040\114\001" +
    "\002\000\024\003\100\004\074\010\063\011\062\014\061" +
    "\015\076\016\075\032\060\041\066\001\002\000\030\003" +
    "\uffe1\004\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\013\uffe1" +
    "\014\uffe1\015\uffe1\016\uffe1\041\uffe1\001\002\000\030\003" +
    "\uffe2\004\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\013\uffe2" +
    "\014\uffe2\015\uffe2\016\uffe2\041\uffe2\001\002\000\004\016" +
    "\075\001\002\000\004\031\202\001\002\000\004\031\201" +
    "\001\002\000\024\003\100\004\074\007\ufff0\010\063\011" +
    "\062\014\061\015\076\016\075\041\066\001\002\000\004" +
    "\031\177\001\002\000\030\003\uffe0\004\uffe0\006\uffe0\007" +
    "\uffe0\010\uffe0\011\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\041\uffe0\001\002\000\014\003\106\016\105\017\104\027" +
    "\111\040\114\001\002\000\004\020\uffd5\001\002\000\012" +
    "\003\106\016\105\017\104\027\111\001\002\000\004\007" +
    "\102\001\002\000\030\003\uffdb\004\uffdb\006\uffdb\007\uffdb" +
    "\010\uffdb\011\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\041" +
    "\uffdb\001\002\000\030\003\uffdf\004\uffdf\006\uffdf\007\uffdf" +
    "\010\uffdf\011\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\041" +
    "\uffdf\001\002\000\004\031\103\001\002\000\036\002\ufff1" +
    "\003\ufff1\004\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\013" +
    "\ufff1\014\ufff1\015\ufff1\016\ufff1\032\ufff1\041\ufff1\055\ufff1" +
    "\001\002\000\074\003\uffbc\004\uffbc\005\uffbc\006\uffbc\007" +
    "\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\016\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026" +
    "\uffbc\030\uffbc\031\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc" +
    "\037\uffbc\040\uffbc\041\uffbc\052\uffbc\056\uffbc\001\002\000" +
    "\076\003\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb" +
    "\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\021" +
    "\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\152" +
    "\030\uffbb\031\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037" +
    "\uffbb\040\uffbb\041\uffbb\052\uffbb\056\uffbb\001\002\000\074" +
    "\003\uffba\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011" +
    "\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\021\uffba" +
    "\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\030\uffba\031" +
    "\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba" +
    "\041\uffba\052\uffba\056\uffba\001\002\000\074\003\uffbe\004" +
    "\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe" +
    "\013\uffbe\014\uffbe\015\uffbe\016\uffbe\021\uffbe\022\uffbe\023" +
    "\uffbe\024\uffbe\025\uffbe\026\uffbe\030\uffbe\031\uffbe\033\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\052" +
    "\uffbe\056\uffbe\001\002\000\010\025\133\026\132\031\uffd2" +
    "\001\002\000\014\003\106\016\105\017\104\027\111\040" +
    "\114\001\002\000\074\003\uffc1\004\uffc1\005\uffc1\006\uffc1" +
    "\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015" +
    "\uffc1\016\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\133" +
    "\026\132\030\uffc1\031\uffc1\033\uffc1\034\uffc1\035\uffc1\036" +
    "\uffc1\037\uffc1\040\uffc1\041\uffc1\052\uffc1\056\uffc1\001\002" +
    "\000\006\030\147\034\150\001\002\000\012\003\106\016" +
    "\105\017\104\027\111\001\002\000\050\003\uffd0\004\uffd0" +
    "\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\015\uffd0\016\uffd0\030\uffd0\031\uffd0\033\144" +
    "\034\uffd0\041\uffd0\052\uffd0\056\uffd0\001\002\000\050\003" +
    "\uffce\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce" +
    "\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\030\uffce\031" +
    "\uffce\033\uffce\034\uffce\041\uffce\052\uffce\056\uffce\001\002" +
    "\000\070\003\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010" +
    "\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6" +
    "\021\121\022\120\023\124\024\126\030\uffc6\031\uffc6\033" +
    "\uffc6\034\uffc6\035\123\036\122\037\125\040\127\041\uffc6" +
    "\052\uffc6\056\uffc6\001\002\000\012\003\106\016\105\017" +
    "\104\027\111\001\002\000\012\003\106\016\105\017\104" +
    "\027\111\001\002\000\012\003\106\016\105\017\104\027" +
    "\111\001\002\000\012\003\106\016\105\017\104\027\111" +
    "\001\002\000\012\003\106\016\105\017\104\027\111\001" +
    "\002\000\012\003\106\016\105\017\104\027\111\001\002" +
    "\000\012\003\106\016\105\017\104\027\111\001\002\000" +
    "\012\003\106\016\105\017\104\027\111\001\002\000\054" +
    "\003\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011" +
    "\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\023\124" +
    "\024\126\030\uffc9\031\uffc9\033\uffc9\034\uffc9\041\uffc9\052" +
    "\uffc9\056\uffc9\001\002\000\074\003\uffc2\004\uffc2\005\uffc2" +
    "\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014" +
    "\uffc2\015\uffc2\016\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2" +
    "\025\133\026\132\030\uffc2\031\uffc2\033\uffc2\034\uffc2\035" +
    "\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\052\uffc2\056\uffc2" +
    "\001\002\000\012\003\106\016\105\017\104\027\111\001" +
    "\002\000\012\003\106\016\105\017\104\027\111\001\002" +
    "\000\074\003\uffc0\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010" +
    "\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\030" +
    "\uffc0\031\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0" +
    "\040\uffc0\041\uffc0\052\uffc0\056\uffc0\001\002\000\074\003" +
    "\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf" +
    "\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\030\uffbf\031\uffbf" +
    "\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041" +
    "\uffbf\052\uffbf\056\uffbf\001\002\000\054\003\uffca\004\uffca" +
    "\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013" +
    "\uffca\014\uffca\015\uffca\016\uffca\023\124\024\126\030\uffca" +
    "\031\uffca\033\uffca\034\uffca\041\uffca\052\uffca\056\uffca\001" +
    "\002\000\074\003\uffc3\004\uffc3\005\uffc3\006\uffc3\007\uffc3" +
    "\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\133\026\132" +
    "\030\uffc3\031\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037" +
    "\uffc3\040\uffc3\041\uffc3\052\uffc3\056\uffc3\001\002\000\054" +
    "\003\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011" +
    "\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\023\124" +
    "\024\126\030\uffcc\031\uffcc\033\uffcc\034\uffcc\041\uffcc\052" +
    "\uffcc\056\uffcc\001\002\000\054\003\uffcb\004\uffcb\005\uffcb" +
    "\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014" +
    "\uffcb\015\uffcb\016\uffcb\023\124\024\126\030\uffcb\031\uffcb" +
    "\033\uffcb\034\uffcb\041\uffcb\052\uffcb\056\uffcb\001\002\000" +
    "\054\003\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\023" +
    "\124\024\126\030\uffc8\031\uffc8\033\uffc8\034\uffc8\041\uffc8" +
    "\052\uffc8\056\uffc8\001\002\000\054\003\uffcd\004\uffcd\005" +
    "\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd" +
    "\014\uffcd\015\uffcd\016\uffcd\023\124\024\126\030\uffcd\031" +
    "\uffcd\033\uffcd\034\uffcd\041\uffcd\052\uffcd\056\uffcd\001\002" +
    "\000\014\003\106\016\105\017\104\027\111\040\114\001" +
    "\002\000\050\003\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf" +
    "\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016" +
    "\uffcf\030\uffcf\031\uffcf\033\uffcf\034\uffcf\041\uffcf\052\uffcf" +
    "\056\uffcf\001\002\000\054\003\uffc7\004\uffc7\005\uffc7\006" +
    "\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7" +
    "\015\uffc7\016\uffc7\023\124\024\126\030\uffc7\031\uffc7\033" +
    "\uffc7\034\uffc7\041\uffc7\052\uffc7\056\uffc7\001\002\000\074" +
    "\003\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011" +
    "\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\021\uffbd" +
    "\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\030\uffbd\031" +
    "\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\052\uffbd\056\uffbd\001\002\000\014\003\106\016" +
    "\105\017\104\027\111\040\114\001\002\000\050\003\uffd1" +
    "\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012" +
    "\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\030\uffd1\031\uffd1" +
    "\033\144\034\uffd1\041\uffd1\052\uffd1\056\uffd1\001\002\000" +
    "\016\003\106\016\105\017\104\027\111\030\154\040\114" +
    "\001\002\000\010\030\uffc4\034\150\052\157\001\002\000" +
    "\074\003\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9" +
    "\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\021" +
    "\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\030\uffb9" +
    "\031\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040" +
    "\uffb9\041\uffb9\052\uffb9\056\uffb9\001\002\000\004\030\156" +
    "\001\002\000\074\003\uffb8\004\uffb8\005\uffb8\006\uffb8\007" +
    "\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8" +
    "\016\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026" +
    "\uffb8\030\uffb8\031\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\037\uffb8\040\uffb8\041\uffb8\052\uffb8\056\uffb8\001\002\000" +
    "\014\003\106\016\105\017\104\027\111\040\114\001\002" +
    "\000\004\030\uffc5\001\002\000\004\020\162\001\002\000" +
    "\014\003\106\016\105\017\104\027\111\040\114\001\002" +
    "\000\010\031\uffd4\034\150\056\uffd4\001\002\000\006\005" +
    "\165\034\150\001\002\000\024\003\100\004\074\010\063" +
    "\011\062\014\061\015\076\016\075\032\060\041\066\001" +
    "\002\000\006\006\171\007\172\001\002\000\030\003\ufff2" +
    "\004\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\013\ufff2\014" +
    "\ufff2\015\ufff2\016\ufff2\041\ufff2\001\002\000\030\003\ufff3" +
    "\004\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\013\ufff3\014" +
    "\ufff3\015\ufff3\016\ufff3\041\ufff3\001\002\000\024\003\100" +
    "\004\074\010\063\011\062\014\061\015\076\016\075\032" +
    "\060\041\066\001\002\000\004\031\173\001\002\000\030" +
    "\003\uffda\004\uffda\006\uffda\007\uffda\010\uffda\011\uffda\013" +
    "\uffda\014\uffda\015\uffda\016\uffda\041\uffda\001\002\000\004" +
    "\007\175\001\002\000\004\031\176\001\002\000\030\003" +
    "\uffd9\004\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\041\uffd9\001\002\000\030\003" +
    "\uffdd\004\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\013\uffdd" +
    "\014\uffdd\015\uffdd\016\uffdd\041\uffdd\001\002\000\004\007" +
    "\uffef\001\002\000\030\003\uffde\004\uffde\006\uffde\007\uffde" +
    "\010\uffde\011\uffde\013\uffde\014\uffde\015\uffde\016\uffde\041" +
    "\uffde\001\002\000\030\003\uffdc\004\uffdc\006\uffdc\007\uffdc" +
    "\010\uffdc\011\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\041" +
    "\uffdc\001\002\000\004\056\204\001\002\000\012\003\106" +
    "\016\105\017\104\027\111\001\002\000\010\012\206\025" +
    "\133\026\132\001\002\000\024\003\100\004\074\010\063" +
    "\011\062\014\061\015\076\016\075\032\060\041\066\001" +
    "\002\000\030\003\uffd6\004\uffd6\006\uffd6\007\uffd6\010\uffd6" +
    "\011\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\041\uffd6\001" +
    "\002\000\004\013\211\001\002\000\014\003\106\016\105" +
    "\017\104\027\111\040\114\001\002\000\032\003\uffd8\004" +
    "\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\013\uffd8\014\uffd8" +
    "\015\uffd8\016\uffd8\034\150\041\uffd8\001\002\000\006\012" +
    "\214\034\150\001\002\000\024\003\100\004\074\010\063" +
    "\011\062\014\061\015\076\016\075\032\060\041\066\001" +
    "\002\000\030\003\uffd7\004\uffd7\006\uffd7\007\uffd7\010\uffd7" +
    "\011\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\041\uffd7\001" +
    "\002\000\006\031\uffd3\034\150\001\002\000\004\032\060" +
    "\001\002\000\004\002\uffff\001\002\000\010\031\055\032" +
    "\ufffd\055\ufffd\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\010\037\011" +
    "\001\001\000\010\022\220\023\027\024\030\001\001\000" +
    "\002\001\001\000\004\040\012\001\001\000\004\044\216" +
    "\001\001\000\006\031\016\045\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\022\001\001\000" +
    "\004\033\056\001\001\000\010\022\025\023\027\024\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\025\034" +
    "\026\035\027\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\055\024\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\070" +
    "\005\064\006\063\007\072\010\067\011\071\012\066\034" +
    "\076\035\100\001\001\000\016\013\215\014\116\015\111" +
    "\016\106\041\114\042\115\001\001\000\016\013\212\014" +
    "\116\015\111\016\106\041\114\042\115\001\001\000\026" +
    "\003\167\005\064\006\063\007\072\010\067\011\071\012" +
    "\066\033\166\035\100\043\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\070\005\064\006\063" +
    "\007\072\010\067\011\071\012\066\034\177\035\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\013\163" +
    "\014\116\015\111\016\106\041\114\042\115\001\001\000" +
    "\004\046\160\001\001\000\006\015\107\016\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\013\112\014\116\015\111\016\106\041\114" +
    "\042\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\145\015\111\016\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\142\015" +
    "\111\016\106\001\001\000\010\014\141\015\111\016\106" +
    "\001\001\000\010\014\140\015\111\016\106\001\001\000" +
    "\010\014\137\015\111\016\106\001\001\000\006\015\136" +
    "\016\106\001\001\000\010\014\135\015\111\016\106\001" +
    "\001\000\006\015\130\016\106\001\001\000\010\014\127" +
    "\015\111\016\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\134\001\001\000\004\016\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\116\015\111\016" +
    "\106\042\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\014\116\015\111\016\106\041" +
    "\150\042\115\001\001\000\002\001\001\000\020\013\152" +
    "\014\116\015\111\016\106\036\154\041\114\042\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\013\152\014\116\015\111\016" +
    "\106\036\157\041\114\042\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\013\162\014\116\015\111\016" +
    "\106\041\114\042\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\167\005\064\006\063\007\072\010" +
    "\067\011\071\012\066\033\166\035\100\043\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\167\005\064\006\063\007\072\010\067\011\071" +
    "\012\066\033\166\035\100\043\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\204\016\106\001\001\000\002\001\001\000\026\003" +
    "\167\005\064\006\063\007\072\010\067\011\071\012\066" +
    "\033\166\035\100\043\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\013\211\014\116\015\111\016\106" +
    "\041\114\042\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\167\005\064\006\063\007\072\010\067" +
    "\011\071\012\066\033\166\035\100\043\214\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




/***********
SymbolFactory es una nueva caracteristica que ha sido a???adida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha informaci???n de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/
	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		parser parser_obj;
		if (args.length==0) 
			parser_obj=new parser(new Scanner(System.in,sf),sf);
		else 
			parser_obj=new parser(new Scanner(new java.io.FileInputStream(args[0]),sf),sf);

		parser_obj.parse();
		/*NodoBase root=parser_obj.action_obj.getASTroot();
		System.out.println();
		System.out.println("IMPRESION DEL AST GENERADO");
		System.out.println();
		ast.Util.imprimirAST(root);
		TablaSimbolos ts = new TablaSimbolos();
		ts.cargarTabla(root);
		ts.ImprimirClaves();
		Tiny.Generador.setTablaSimbolos(ts);
		Tiny.Generador.generarCodigoObjeto(root);*/
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	private boolean debug=true;
	private NodoBase ast=null;
	private int lineanum=0;
	String tipo="";
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
	

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // factor ::= ID LPAREN args_stmt RPAREN 
            {
              NodoBase RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
					if (debug) System.out.println("\t regla 12f"); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // factor ::= ID LPAREN RPAREN 
            {
              NodoBase RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
					if (debug) System.out.println("\t regla 12e"); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // factor ::= error 
            {
              NodoBase RESULT =null;
		 
					if(debug) System.out.println("\t regla 12d"); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // factor ::= ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					if(debug) System.out.println("\t regla 12c");
				
					if(variable != null){
						System.out.println("\t contruyendo nodoId para lexema:"+variable.toString());
						RESULT = new NodoIdentificador(variable.toString());
					}
				
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // factor ::= NUM 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					if(debug) System.out.println("\t regla 12b");
				 
						System.out.println("Devolvi nodo numero entero");
					
						if (valor != null) {
							RESULT = new NodoValor(Integer.parseInt(valor));
						} else { 
							RESULT = null;
							System.out.println("\t ERROR en cup ");
						}
					
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // factor ::= LPAREN exp RPAREN 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					if(debug) System.out.println("\t regla 12a"); 
					RESULT= ex;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // term ::= factor 
            {
              NodoBase RESULT =null;
		int factleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fact = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					if(debug) System.out.println("\t regla 11c"); 
					RESULT = fact;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // term ::= term OVER factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					if(debug) System.out.println("\t regla 11b"); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // term ::= term TIMES factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					if(debug) System.out.println("\t regla 11a"); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // simple_exp ::= term 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					if(debug) System.out.println("\t regla 10c"); 
					RESULT=ex;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // simple_exp ::= simple_exp MINUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					if(debug) System.out.println("\t regla 10b"); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // simple_exp ::= simple_exp PLUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					if(debug) System.out.println("\t regla 10a"); 
					RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // args_stmt ::= exp 
            {
              NodoBase RESULT =null;
		
				if (debug) System.out.println("\t argumento");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_stmt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // args_stmt ::= exp COMMA args_stmt 
            {
              NodoBase RESULT =null;
		
				if (debug) System.out.println("\t argumentos");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_stmt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp_logica ::= simple_exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				if(debug) System.out.println("\t regla 9c");
				RESULT = ex; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_logica",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp_logica ::= NQ simple_exp 
            {
              NodoBase RESULT =null;
		 
				if (debug) System.out.println("\t regla 9i"); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_logica",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp_logica ::= simple_exp EQ simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				if(debug) System.out.println("\t regla 9b"); 
				RESULT = new NodoOperacion(exI, tipoOp.igual, exD);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_logica",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp_logica ::= simple_exp NQ simple_exp 
            {
              NodoBase RESULT =null;
		 
				if (debug) System.out.println("\t regla 9h"); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_logica",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp_logica ::= simple_exp GQ simple_exp 
            {
              NodoBase RESULT =null;
		 
				if (debug) System.out.println("\t regla 9f"); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_logica",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp_logica ::= simple_exp GT simple_exp 
            {
              NodoBase RESULT =null;
		 
				if (debug) System.out.println("\t regla 9e");	
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_logica",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp_logica ::= simple_exp LQ simple_exp 
            {
              NodoBase RESULT =null;
		 
				if (debug) System.out.println("\t regla 9d"); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_logica",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp_logica ::= simple_exp LT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 9a"); 
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_logica",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp_and ::= exp_logica 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				if (debug) System.out.println("\t regla 9b sin and");
				
				RESULT = ex;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_and",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp_and ::= exp_and AND exp_logica 
            {
              NodoBase RESULT =null;
		 if (debug) System.out.println("\t regla 9b con and"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_and",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp_and 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				if (debug) System.out.println("\t regla 9a sin or");
				
				RESULT = ex; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp OR exp_and 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				if (debug) System.out.println("\t regla 9a con or"); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // write_stmt ::= WRITE term 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				if(debug) System.out.println("\t regla 8");
				
				RESULT = new NodoEscribir(ex); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // read_stmt ::= READ exp 
            {
              NodoBase RESULT =null;
		 if(debug) System.out.println("\t regla 7"); 
				System.out.println("Leyendo Variable");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // assign_stmt ::= ID NT$0 ASSIGN exp 
            {
              NodoBase RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				if(debug) System.out.println("\t regla 6 parte final");
				
				if (variable != null) {
				
					RESULT = new NodoAsignacion(variable.toString(), ex);
				
				} else {
				
					RESULT = null;
					
					System.out.println("\t ocurrio error en cup");
				
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$0 ::= 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
				if(debug) System.out.println("\t regla 6 parte del medio"); 
				//String nombre = variable.getName();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // for_stmt ::= FOR assign_stmt TO term DO lista 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int terleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int terright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ter = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				if (debug) System.out.println("\t declaracion del for");
				RESULT = new NodoFor(ex, ter, cuerpo);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // while_stmt ::= WHILE exp DO lista 
            {
              NodoBase RESULT =null;
		int pruebaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pruebaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase prueba = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				if(debug) System.out.println("\t regla 5w"); 
				
				RESULT = new NodoWhile(prueba, cuerpo);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // repeat_stmt ::= REPEAT lista UNTIL exp 
            {
              NodoBase RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pruebaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pruebaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase prueba = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				if(debug) System.out.println("\t regla 5");
				RESULT = new NodoRepeat(cuerpo,prueba); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // if_stmt ::= IF exp THEN lista ELSE lista END SEMI 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pelseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pelseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase pelse = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			 		if(debug) System.out.println("\t regla 4b"); 
			 		
			 		RESULT = new NodoIf(ex, pthen, pelse);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // if_stmt ::= IF exp THEN lista END SEMI 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
					if(debug) System.out.println("\t regla 4a"); 
					
					RESULT = new NodoIf(ex, pthen);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaraciones ::= error 
            {
              NodoBase RESULT =null;
		 if(debug) System.out.println("\t regla 3f"); 
				System.out.println("Ocurrio error en cup # 0004");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaraciones ::= write_stmt SEMI 
            {
              NodoBase RESULT =null;
		int sescleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sescright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sesc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            		if(debug) System.out.println("\t regla 3e"); 
            		RESULT = sesc;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaraciones ::= read_stmt SEMI 
            {
              NodoBase RESULT =null;
		int slecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase slec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            		if(debug) System.out.println("\t regla 3d"); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaraciones ::= assign_stmt SEMI 
            {
              NodoBase RESULT =null;
		int sasileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sasiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sasi = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            		if(debug) System.out.println("\t regla 3c"); 
            		RESULT = sasi;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaraciones ::= for_stmt 
            {
              NodoBase RESULT =null;
		int fdecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fdec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					if (debug) System.out.println("\t regla del for");
					RESULT = fdec;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaraciones ::= while_stmt 
            {
              NodoBase RESULT =null;
		int wrepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wrepright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase wrep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		   			if(debug) System.out.println("\t regla 3f"); 
		   			RESULT = wrep;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaraciones ::= repeat_stmt 
            {
              NodoBase RESULT =null;
		int srepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srepright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase srep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            		if(debug) System.out.println("\t regla 3b"); 
            		RESULT = srep;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaraciones ::= if_stmt 
            {
              NodoBase RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sif = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					if(debug) System.out.println("\t regla 3a"); 
					RESULT = sif;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ind_range ::= NUM DOT DOT NUM 
            {
              NodoBase RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int niright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ni = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ndleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ndright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					if (debug) System.out.println("Array entre"+ni+" "+nd);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ind_range",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // simp_type ::= BOOLEAN 
            {
              NodoBase RESULT =null;
		
					if (debug) System.out.println("type Boolean");
					this.tipo = "Boolean";
					
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simp_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // simp_type ::= INTEGER 
            {
              NodoBase RESULT =null;
		
					if (debug) System.out.println("type Integer");
					this.tipo = "Integer";
					
					
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simp_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // func_type ::= BOOLEAN 
            {
              String RESULT =null;
		
				RESULT = "Boolean";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // func_type ::= INTEGER 
            {
              String RESULT =null;
		
				RESULT = "Integer";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // arr_type ::= ARRAY LB ind_range RB OF simp_type 
            {
              NodoBase RESULT =null;
		
				if (debug) System.out.println("\t regla 7");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= arr_type 
            {
              NodoBase RESULT =null;
		int arr_typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arr_typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase arr_type = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				if (debug) System.out.println("\t regla 6.2");
			   RESULT = arr_type;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= simp_type 
            {
              NodoBase RESULT =null;
		int simp_typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simp_typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase simp_type = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				if (debug) System.out.println("\t regla 6.1");	
				RESULT = simp_type;			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // dec ::= ID 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				//if (debug) System.out.println("\t nombre de variable: "+fact);
				//ojo aqui con el
				RESULT = new NodoVar(nombre,"");		 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // dec ::= dec COL type 
            {
              NodoBase RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase dec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase type = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				if (debug) System.out.println("\t regla 5.2");
				NodoVar hijoActual = (NodoVar)dec;
					if(hijoActual !=null){
						while(hijoActual.TieneHermano()){
							hijoActual = (NodoVar) hijoActual.getHermanoDerecha();
						}
						hijoActual.setHermanoDerecha(type);
						RESULT = (NodoVar)dec;
					}else{
						RESULT = type;
					}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_dec ::= dec 
            {
              NodoVar RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase dec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				if (debug) System.out.println("\t regla 4.1"); 
				RESULT = (NodoVar)dec;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // var_dec ::= var_dec COMMA dec 
            {
              NodoVar RESULT =null;
		int var_decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var_decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoVar var_dec = (NodoVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase dec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				if (debug) System.out.println("\t regla 4.2");
				NodoBase hijoActual = var_dec;
					if(hijoActual !=null){   
						while(hijoActual.TieneHermano()){
							hijoActual = hijoActual.getHermanoDerecha();			
						}
						hijoActual.setHermanoDerecha(dec);
						RESULT = var_dec;
					}else{
						RESULT = (NodoVar)dec;
					}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista_declaraciones ::= declaraciones lista_declaraciones 
            {
              NodoBase RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase dec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase lista = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					if (debug) System.out.println("\t Regla 2 declaraciones");
					
					NodoBase hijoActual = dec;
					
					if (hijoActual != null) {
						while(hijoActual.TieneHermano()) {
							hijoActual = hijoActual.getHermanoDerecha();
						}
						hijoActual.setHermanoDerecha(lista);
						RESULT = dec;
					} else {
						RESULT = lista;
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_declaraciones ::= declaraciones 
            {
              NodoBase RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase dec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					if (debug) System.out.println("\t Regla 1 declaraciones");
					
					RESULT = dec;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stm ::= BEGIN lista_declaraciones END SEMI 
            {
              NodoBase RESULT =null;
		int ldecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ldecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ldec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
					System.out.println("\t lista de declaraciones");
					RESULT = new NodoBegin(ldec);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stm",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista ::= stm 
            {
              NodoBase RESULT =null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase stm = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=stm;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista ::= declaraciones 
            {
              NodoBase RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase dec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT=dec;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // argumentos ::= LPAREN RPAREN 
            {
              NodoBase RESULT =null;
		
					if (debug) System.out.println("\t funcion sin parametros");
					RESULT = null;	
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // argumentos ::= LPAREN var_dec_p RPAREN 
            {
              NodoBase RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase vars = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					if (debug) System.out.println("\t regla 8 Argumentos");
					RESULT = vars;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // func_dec_p ::= func_type ID argumentos stm 
            {
              NodoBase RESULT =null;
		int func_typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int func_typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String func_type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String nf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase args = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase stm = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				 	if (debug) System.out.println("\t Declaracion de la funcion"+nf);
				 	
				 	RESULT = new NodoFuncion(func_type, nf, args, 0, stm);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_dec_p",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // func_p ::= 
            {
              NodoBase RESULT =null;
		
				RESULT = null; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_p",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // func_p ::= FUNCTION func_dec_p func_p 
            {
              NodoBase RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase func = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int funcpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase funcp = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				NodoBase hijoActual = func;
					
					if (hijoActual != null) {
						while(hijoActual.TieneHermano()) {
							hijoActual = hijoActual.getHermanoDerecha();
						}
						hijoActual.setHermanoDerecha(funcp);
						RESULT = func;
					} else {
						RESULT = funcp;
					}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_p",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_dec_p ::= var_dec 
            {
              NodoBase RESULT =null;
		int var_decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoVar var_dec = (NodoVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				if (debug) System.out.println("\t declara variable regla 3,3");
				
				 NodoVar hijoActual1 = var_dec;
			   hijoActual1.setType_var(tipo);
			   while( hijoActual1.TieneHermano() ){
			   	
			   	hijoActual1 = (NodoVar)hijoActual1.getHermanoDerecha();
			   	hijoActual1.setType_var(tipo);
			   
			   } 
			   
			   RESULT = (NodoBase)var_dec;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec_p",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_dec_p ::= var_dec_p SEMI var_dec 
            {
              NodoBase RESULT =null;
		int var_dec_pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var_dec_pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase var_dec_p = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int var_decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoVar var_dec = (NodoVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				if (debug) System.out.println("\t declara variable  regla 3.2"); 
				NodoVar hijoActual1 = var_dec;
			   hijoActual1.setType_var(tipo);
			   while( hijoActual1.TieneHermano() ){
			   	
			   	hijoActual1 = (NodoVar)hijoActual1.getHermanoDerecha();
			   	hijoActual1.setType_var(tipo);
			   
			   } 
			   NodoBase hijoActual = var_dec_p;
				if(hijoActual !=null){
					while(hijoActual.TieneHermano()){
						hijoActual = hijoActual.getHermanoDerecha();
					}
						hijoActual.setHermanoDerecha(var_dec);
						RESULT = var_dec_p;
					}else{
						RESULT = var_dec;
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec_p",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var_dec_p ::= var_dec_p SEMI 
            {
              NodoBase RESULT =null;
		int var_dec_pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var_dec_pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase var_dec_p = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
				if (debug) System.out.println("\t declara variable regla 3.1"); 
				
				RESULT = var_dec_p;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec_p",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // var_p ::= 
            {
              NodoBase RESULT =null;
		RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_p",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // var_p ::= VAR var_dec_p 
            {
              NodoBase RESULT =null;
		int var_dec_pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var_dec_pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase var_dec_p = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = var_dec_p;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_p",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // proc_p ::= 
            {
              NodoBase RESULT =null;
		RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_p",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cuerpo ::= var_p func_p proc_p stm 
            {
              NodoBase RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase vars = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int funsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int funsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase funs = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int procsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int procsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase procs = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase stm = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
			if(debug) System.out.println("\t declaracion de variables");
			 RESULT = new NodoMain(vars, funs, procs, stm);
			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM ID SEMI cuerpo 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bdyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bdyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase bdy = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				if(debug) System.out.println("\t regla 1");
				
				 ast = new NodoProgram(nombre, bdy);
				
				
				System.out.println(ast);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

